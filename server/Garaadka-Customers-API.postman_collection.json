{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789abc",
		"name": "Garaadka Customers API",
		"description": "Complete API collection for Garaadka Laundry Customer Management System",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.token) {",
									"        pm.environment.set('auth_token', response.token);",
									"        console.log('Token saved to environment');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login to get JWT token for authentication"
					},
					"response": []
				}
			]
		},
		{
			"name": "Customers - Basic Operations",
			"item": [
				{
					"name": "Get Latest 5 Customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has customers array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('customers');",
									"    pm.expect(jsonData.customers).to.be.an('array');",
									"});",
									"",
									"pm.test('Customers count is 5 or less', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.customers.length).to.be.at.most(5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/customers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers"
							]
						},
						"description": "Get the latest 5 customers (optimized for performance)"
					},
					"response": []
				},
				{
					"name": "Get All Customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is an array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/customers/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers",
								"all"
							]
						},
						"description": "Get all customers (admin use - use with caution)"
					},
					"response": []
				},
				{
					"name": "Get Paginated Customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has pagination info', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('pagination');",
									"    pm.expect(jsonData).to.have.property('customers');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/customers/paginated?page=1&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers",
								"paginated"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Get customers with pagination (better performance for large datasets)"
					},
					"response": []
				},
				{
					"name": "Create New Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Customer created successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('customer_id');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    ",
									"    // Save customer ID for other tests",
									"    if (jsonData.customer_id) {",
									"        pm.environment.set('test_customer_id', jsonData.customer_id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer_name\": \"Ahmed Mohamed Hassan\",\n    \"phone_number\": \"0912345678\",\n    \"email\": \"ahmed.hassan@example.com\",\n    \"address\": \"Jigjiga, Somali Region, Ethiopia\",\n    \"notes\": \"VIP customer - prefers express service\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/customers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers"
							]
						},
						"description": "Create a new customer with full validation"
					},
					"response": []
				},
				{
					"name": "Get Customer by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Customer details returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('customer_id');",
									"    pm.expect(jsonData).to.have.property('customer_name');",
									"    pm.expect(jsonData).to.have.property('phone_number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/customers/{{test_customer_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers",
								"{{test_customer_id}}"
							]
						},
						"description": "Get customer details by ID (uses test_customer_id from environment)"
					},
					"response": []
				},
				{
					"name": "Update Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Customer updated successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('updated');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer_name\": \"Ahmed Mohamed Hassan Ali\",\n    \"phone_number\": \"0912345679\",\n    \"email\": \"ahmed.hassan.ali@example.com\",\n    \"address\": \"Addis Ababa, Ethiopia\",\n    \"notes\": \"Updated VIP customer - moved to Addis Ababa\",\n    \"status\": \"active\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/customers/{{test_customer_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers",
								"{{test_customer_id}}"
							]
						},
						"description": "Update customer information"
					},
					"response": []
				}
			]
		},
		{
			"name": "Customers - Search Operations",
			"item": [
				{
					"name": "Multi-Criteria Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Search results returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('customers');",
									"    pm.expect(jsonData).to.have.property('search_criteria');",
									"    pm.expect(jsonData).to.have.property('total_results');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/customers/search?query=Ahmed&search_type=any",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "Ahmed"
								},
								{
									"key": "search_type",
									"value": "any"
								}
							]
						},
						"description": "Search customers using multiple criteria with flexible matching"
					},
					"response": []
				},
				{
					"name": "Search by Phone Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Customer found by phone', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('customer');",
									"    pm.expect(jsonData).to.have.property('phone_searched');",
									"    pm.expect(jsonData).to.have.property('phone_found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/customers/search/phone/927802065",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers",
								"search",
								"phone",
								"927802065"
							]
						},
						"description": "Search customer by phone number (handles formats with/without leading zeros)"
					},
					"response": []
				},
				{
					"name": "Search by Phone Number (Alternative Format)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/customers/search/phone/0927802065",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers",
								"search",
								"phone",
								"0927802065"
							]
						},
						"description": "Search customer by phone number with leading zero"
					},
					"response": []
				},
				{
					"name": "Search by Order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 or 404', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test('Order search results returned', function () {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('results');",
									"        pm.expect(jsonData).to.have.property('message');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/customers/search/order/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers",
								"search",
								"order",
								"1"
							]
						},
						"description": "Search customers by order ID or order number"
					},
					"response": []
				},
				{
					"name": "Simple Search by Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Search results returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('customers');",
									"    pm.expect(jsonData).to.have.property('search_term');",
									"    pm.expect(jsonData).to.have.property('total_results');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/customers/search/ISMAIL",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers",
								"search",
								"ISMAIL"
							]
						},
						"description": "Simple search by customer name or phone number"
					},
					"response": []
				}
			]
		},
		{
			"name": "Customers - Advanced Search",
			"item": [
				{
					"name": "Search with Multiple Criteria (AND logic)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/customers/search?query=Ahmed&phone=091&search_type=all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "Ahmed"
								},
								{
									"key": "phone",
									"value": "091"
								},
								{
									"key": "search_type",
									"value": "all"
								}
							]
						},
						"description": "Search customers where ALL criteria match (AND logic)"
					},
					"response": []
				},
				{
					"name": "Search with Multiple Criteria (OR logic)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/customers/search?name=Ahmed&phone=927&search_type=any",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers",
								"search"
							],
							"query": [
								{
									"key": "name",
									"value": "Ahmed"
								},
								{
									"key": "phone",
									"value": "927"
								},
								{
									"key": "search_type",
									"value": "any"
								}
							]
						},
						"description": "Search customers where ANY criteria match (OR logic)"
					},
					"response": []
				},
				{
					"name": "Search by Name Only",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/customers/search?name=Hassan",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers",
								"search"
							],
							"query": [
								{
									"key": "name",
									"value": "Hassan"
								}
							]
						},
						"description": "Search customers by name only"
					},
					"response": []
				},
				{
					"name": "Search by Phone Pattern",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/customers/search?phone=915",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers",
								"search"
							],
							"query": [
								{
									"key": "phone",
									"value": "915"
								}
							]
						},
						"description": "Search customers by phone number pattern"
					},
					"response": []
				}
			]
		},
		{
			"name": "Customers - Validation Tests",
			"item": [
				{
					"name": "Create Customer - Missing Required Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Error message for missing fields', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.include('required');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer_name\": \"Test Customer\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/customers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers"
							]
						},
						"description": "Test validation - missing phone number"
					},
					"response": []
				},
				{
					"name": "Create Customer - Invalid Name Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Error message for invalid name', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.include('full name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer_name\": \"Test\",\n    \"phone_number\": \"0912345678\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/customers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers"
							]
						},
						"description": "Test validation - single name not allowed"
					},
					"response": []
				},
				{
					"name": "Create Customer - Invalid Phone Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Error message for invalid phone', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.include('valid phone number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer_name\": \"Test Customer Name\",\n    \"phone_number\": \"123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/customers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers"
							]
						},
						"description": "Test validation - phone number too short"
					},
					"response": []
				},
				{
					"name": "Create Customer - Duplicate Phone Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 409', function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test('Error message for duplicate phone', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.include('already exists');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer_name\": \"Another Customer Name\",\n    \"phone_number\": \"0927802065\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/customers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers"
							]
						},
						"description": "Test validation - duplicate phone number (ISMAIL's phone)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Customers - Edge Cases",
			"item": [
				{
					"name": "Get Non-existent Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Error message for not found', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.include('not found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/customers/99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers",
								"99999"
							]
						},
						"description": "Test getting a customer that doesn't exist"
					},
					"response": []
				},
				{
					"name": "Search Non-existent Phone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Error message for phone not found', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.include('No customer found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/customers/search/phone/0999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers",
								"search",
								"phone",
								"0999999999"
							]
						},
						"description": "Test searching for a phone number that doesn't exist"
					},
					"response": []
				},
				{
					"name": "Update Non-existent Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Error message for not found', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.include('not found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer_name\": \"Updated Name\",\n    \"phone_number\": \"0912345678\",\n    \"status\": \"active\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/customers/99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers",
								"99999"
							]
						},
						"description": "Test updating a customer that doesn't exist"
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Delete Test Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Customer deleted successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('deleted');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/customers/{{test_customer_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"customers",
								"{{test_customer_id}}"
							]
						},
						"description": "Clean up - delete the test customer created during testing"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5000",
			"type": "string"
		}
	]
}